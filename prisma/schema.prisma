// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Schema Client Generator

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema Generator DBML

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String? @unique
  session_id String?
  profile Profile?
  contacts Contact[] @relation("ContactUser")
  contact Contact[] @relation("ContactPerson")
  recipients Chat[] @relation("ChatRecipient")
  senders Chat[] @relation("ChatSender")
  groups Group[] @relation("GroupOwner")
  participant Conversation[] @relation("ConversationParticipant")
  member Members[] @relation("GroupUser")

  @@index([id])
}

model Profile {
  id Int @id @default(autoincrement())
  name String
  username String @unique
  phone String?
  bio String? @db.Text
  avatar String?
  status ProfileStatus @default(OFFLINE)
  userId Int @unique
  user User? @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  @@index([id, userId])
}

model Contact {
  id Int @id @default(autoincrement())
  personId Int
  person User? @relation("ContactPerson", fields: [personId], references: [id])
  userId Int
  user User? @relation("ContactUser", fields: [userId], references: [id])

  @@index([id, personId, userId])
}

model Group {
  id Int @id @default(autoincrement())
  name String?
  description String?
  thumbnail String?
  ownerId Int
  owner User? @relation("GroupOwner", fields: [ownerId], references: [id])
  conversations Conversation[] @relation("ConversationGroup")
  members Members[] @relation("GroupMember")

  @@index([id, ownerId])
}

model Members {
  id Int @id @default(autoincrement())
  userId Int
  user User? @relation("GroupUser", fields: [userId], references: [id])
  groupId Int
  group Group? @relation("GroupMember", fields: [groupId], references: [id])

  @@index([id, userId, groupId])
}

model Chat {
  id Int @id @default(autoincrement())
  content String? @db.Text
  attachment String? @db.Text
  attachment_type String?
  recipientId Int
  senderId Int
  recipient User? @relation("ChatRecipient", fields: [recipientId], references: [id])
  sender User? @relation("ChatSender", fields: [senderId], references: [id])
  status ChatStatus @default(AVAILABLE)
  created_at DateTime @default(now())
  
  @@index([id, senderId, recipientId])
}
model Conversation {
  id Int @id @default(autoincrement())
  content String? @db.Text
  attachment String? @db.Text
  attachment_type String?
  participantId Int
  participant User? @relation("ConversationParticipant", fields: [participantId], references: [id])
  groupId Int
  group Group? @relation("ConversationGroup", fields: [groupId], references: [id])
  status ConversationStatus @default(AVAILABLE)
  created_at DateTime @default(now())
  
  @@index([id, participantId, groupId])
}

enum ProfileStatus {
  ONLINE
  IDLE
  OFFLINE
}

enum ChatStatus {
  AVAILABLE
  UNAVAILABLE
}

enum ConversationStatus {
  CLOSED
  AVAILABLE
  UNAVAILABLE
}
